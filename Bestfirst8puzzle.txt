**8 Puzzle Problem using Best First Search

#include <bits/stdc++.h>

using namespace std;

void bestfirst(int [3][3], int [3][3],int,int);

int main()
{
    int initial[ 3][ 3] = {{1, 2, 3}, {8, 6, 0}, {7, 5, 4}};
    int final[ 3][ 3] = {{1, 2, 3}, {8, 0, 4}, {7, 6, 5}};
    cout<<"\n---------------------------Your initial matrix is-------------------------------\n"<<endl;
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            cout << setw(8) << initial[ i][ j];
        }
        cout<<endl;
    }
    cout<<"\n---------------------------Your final matrix is--------------------------------\n"<<endl;
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            cout << setw(8) << final[ i][ j];
        }
        cout<<endl;
    }
    cout<<"\n--------------------------------------------------------------------------------"<<endl;
    cout<<"\n--------------------------------------------------------------------------------"<<endl;
    cout<<"\nBest First Search Algorithm\n"<<endl;
    bestfirst(initial, final,-1,-1);
    return 0;
}

void printArray(int array[ 3][ 3])
{
    for(int a=0; a<3; a++)
    {
        for(int b=0; b<3; b++)
        {
            cout<< setw(8) << array[ a][ b];
        }
        cout<<endl;
    }
    cout<<endl;
}

int objective_func(int start_state[3][3], int goal_state[3][3])
{
    int objf = 0;
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            if(start_state[ i][ j] > 0)
            {
                if (goal_state[ i][ j] == start_state[ i][ j])
                    objf++;
            }
        }
    }
    return objf;
}

void makeMove(int temp[3][3], int move)
{
    int flag=0;
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            if(temp[ i][ j] == 0)
            {
                if(move==1)
                {
                    temp[ i][ j] = temp[ i-1][ j];
                    temp[ i-1][ j] = 0;
                    flag=1;
                    break;
                }
                else if(move==2)
                {
                    temp[ i][ j] = temp[ i+1][ j];
                    temp[ i+1][ j] = 0;
                    flag=1;
                    break;
                }
                else if(move==3)
                {
                    temp[ i][ j] = temp[ i][ j-1];
                    temp[ i][ j-1] = 0;
                    flag=1;
                    break;
                }
                else
                {
                    temp[ i][ j] = temp[ i][ j+1];
                    temp[ i][ j+1] = 0;
                    flag=1;
                    break;
                }
            }
        }
        if(flag==1)
            break;
    }
}

int tile_Ordering(int current_state[ 3][ 3], int goal_state[ 3][ 3], int move)
{
    int temp[3][3];
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            temp[i][j] = current_state[i][j];
        }
    }
    makeMove(temp, move);
    int objf=objective_func(temp, goal_state);
    return objf;
}

void bestfirst(int start_state[3][3], int goal_state[3][3],int max,int pmax)
{
    int arr[4] = {0, 0, 0, 0};
    int index=0,c=0,f=0,d=0;
    cout<<"--------------------------------------------------------------------------------"<<endl;
    for(int i=0; i<3; i++)
    {
        for(int j=0; j<3; j++)
        {
            if (start_state[i][j] == 0)
            {
                f=1;
                if(i==0)
                {
                    c=1;
                    arr[0] = 0;
                    arr[c++] =tile_Ordering(start_state, goal_state, 2);
                }
                if(i==1)
                {
                    arr[c++] =tile_Ordering(start_state, goal_state, 1);
                    arr[c++] =tile_Ordering(start_state, goal_state, 2);
                }
                if(i==2)
                {
                    arr[c++] =tile_Ordering(start_state, goal_state, 1);
                    arr[c++] = 0;
                }
                if(j==0)
                {
                    arr[c++] = 0;
                    arr[c++] =tile_Ordering(start_state, goal_state, 4);
                }
                if(j==1)
                {
                    arr[c++] =tile_Ordering(start_state, goal_state, 3);
                    arr[c++] =tile_Ordering(start_state, goal_state, 4);
                }
                if(j==2)
                {
                    arr[c++] =tile_Ordering(start_state, goal_state, 3);
                    arr[c++] = 0;
                }
            }
        }
        if(f==1)
            break;
        cout<<endl;
    }
    
    for(int i=c;i<3;i++)
        arr[i] = 0;
        
    cout<<endl;
    pmax = max;
    
    for(int i=0;i<4;i++)
    {
        if(max<arr[i])
        {
            max = arr[i];
            index = i+1;
        }
    }

    cout<<"Objective function : "<<max<<endl<<endl;
    makeMove(start_state, index);
    printArray(start_state);

    if(max==8)
    {
        cout<<"Goal State Reached"<<endl;
        return;
    }
    
    bestfirst(start_state, goal_state,max,pmax);    
}